[project]

name = "selection"
version = "0.0.21"
description = "API to extract content from HTML & XML documents"
readme = "README.md"
requires-python = ">=2.7"
license = "MIT"
license-files = ["LICENSE"]
keywords = ["lxml", "dom", "html"]
authors = [
    {name = "Gregory Petukhov", email = "lorien@lorien.name"}
]
# https://pypi.org/pypi?%3Aaction=list_classifiers
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 2",
    "Programming Language :: Python :: 2.7",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.0",
    "Programming Language :: Python :: 3.1",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.2",
    "Programming Language :: Python :: 3.3",
    "Programming Language :: Python :: 3.4",
    "Programming Language :: Python :: 3.5",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
    "Typing :: Typed",
]
dependencies = [
    'lxml;platform_system!="Windows"',
]

[project.optional-dependencies]
pyquery = [
    "six",
    'pyquery<=1.4.3; python_version < "3.0"',
    'pyquery; python_version >= "3.0"',
]

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project.urls]
homepage = "http://github.com/lorien/selection"

[tool.setuptools]
packages = ["selection"]

[tool.setuptools.package-data]
"*" = ["py.typed"]

[tool.isort]
profile = "black"
line_length = 88
# skip_gitignore = true # throws errors in stderr when ".git" dir does not exist

[tool.bandit]
# B101 assert_used
# B410 Using HtmlElement to parse untrusted XML data
skips = ["B101", "B410"]

[[tool.mypy.overrides]]
module = "pyquery"
ignore_missing_imports = true

[tool.pylint.main]
jobs=4
extension-pkg-whitelist="lxml"
# R0911 -- handled by ruff
# R0912 -- handled by ruff
# R0915 -- handled by ruff
# R0917 -- handled by ruff
# R0204 -- redefined-variable-type -- handled by ruff
# useless-object-inheritance -- for py27
# redundant-u-string-prefix -- for py27
# raise-missing-from -- for py27
disable="no-member,missing-docstring,broad-except,too-few-public-methods,consider-using-f-string,fixme,isinstance-second-argument-not-valid-type,R0911,R0912,R0915,R0917,R0204,useless-object-inheritance,redundant-u-string-prefix,raise-missing-from"
variable-rgx="[a-z_][a-z0-9_]{1,30}$"
attr-rgx="[a-z_][a-z0-9_]{1,30}$"
argument-rgx="[a-z_][a-z0-9_]{1,30}$"
max-line-length=88
max-args=9
load-plugins=[
    "pylint.extensions.check_elif",
    "pylint.extensions.comparison_placement",
    "pylint.extensions.consider_ternary_expression",
    "pylint.extensions.docstyle",
    "pylint.extensions.for_any_all",
    "pylint.extensions.overlapping_exceptions",
    "pylint.extensions.redefined_loop_name",
    "pylint.extensions.redefined_variable_type",
    "pylint.extensions.set_membership",
    "pylint.extensions.typing",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
